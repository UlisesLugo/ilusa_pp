// Code generated by gocc; DO NOT EDIT.

package lexer

import (
	"io/ioutil"
	"unicode/utf8"

	"github.com/uliseslugo/ilusa_pp/gocc/token"
)

const (
	NoState    = -1
	NumStates  = 158
	NumSymbols = 175
)

type Lexer struct {
	src     []byte
	pos     int
	line    int
	column  int
	Context token.Context
}

func NewLexer(src []byte) *Lexer {
	lexer := &Lexer{
		src:     src,
		pos:     0,
		line:    1,
		column:  1,
		Context: nil,
	}
	return lexer
}

// SourceContext is a simple instance of a token.Context which
// contains the name of the source file.
type SourceContext struct {
	Filepath string
}

func (s *SourceContext) Source() string {
	return s.Filepath
}

func NewLexerFile(fpath string) (*Lexer, error) {
	src, err := ioutil.ReadFile(fpath)
	if err != nil {
		return nil, err
	}
	lexer := NewLexer(src)
	lexer.Context = &SourceContext{Filepath: fpath}
	return lexer, nil
}

func (l *Lexer) Scan() (tok *token.Token) {
	tok = &token.Token{}
	if l.pos >= len(l.src) {
		tok.Type = token.EOF
		tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = l.pos, l.line, l.column
		tok.Pos.Context = l.Context
		return
	}
	start, startLine, startColumn, end := l.pos, l.line, l.column, 0
	tok.Type = token.INVALID
	state, rune1, size := 0, rune(-1), 0
	for state != -1 {
		if l.pos >= len(l.src) {
			rune1 = -1
		} else {
			rune1, size = utf8.DecodeRune(l.src[l.pos:])
			l.pos += size
		}

		nextState := -1
		if rune1 != -1 {
			nextState = TransTab[state](rune1)
		}
		state = nextState

		if state != -1 {

			switch rune1 {
			case '\n':
				l.line++
				l.column = 1
			case '\r':
				l.column = 1
			case '\t':
				l.column += 4
			default:
				l.column++
			}

			switch {
			case ActTab[state].Accept != -1:
				tok.Type = ActTab[state].Accept
				end = l.pos
			case ActTab[state].Ignore != "":
				start, startLine, startColumn = l.pos, l.line, l.column
				state = 0
				if start >= len(l.src) {
					tok.Type = token.EOF
				}

			}
		} else {
			if tok.Type == token.INVALID {
				end = l.pos
			}
		}
	}
	if end > start {
		l.pos = end
		tok.Lit = l.src[start:end]
	} else {
		tok.Lit = []byte{}
	}
	tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = start, startLine, startColumn
	tok.Pos.Context = l.Context

	return
}

func (l *Lexer) Reset() {
	l.pos = 0
}

/*
Lexer symbols:
0: '''
1: '''
2: '.'
3: 'e'
4: '+'
5: '-'
6: '"'
7: '"'
8: 'P'
9: 'r'
10: 'o'
11: 'g'
12: 'r'
13: 'a'
14: 'm'
15: ':'
16: 'm'
17: 'a'
18: 'i'
19: 'n'
20: '('
21: ')'
22: '{'
23: '}'
24: 'C'
25: 'l'
26: 'a'
27: 's'
28: 's'
29: 'a'
30: 't'
31: 'r'
32: 'i'
33: 'b'
34: 'u'
35: 't'
36: 'e'
37: 's'
38: 'i'
39: 'n'
40: 'h'
41: 'e'
42: 'r'
43: 'i'
44: 't'
45: 's'
46: 'm'
47: 'e'
48: 't'
49: 'h'
50: 'o'
51: 'd'
52: 's'
53: 'p'
54: 'u'
55: 'b'
56: 'l'
57: 'i'
58: 'c'
59: 'p'
60: 'r'
61: 'i'
62: 'v'
63: 'a'
64: 't'
65: 'e'
66: 'p'
67: 'r'
68: 'o'
69: 't'
70: 'e'
71: 'c'
72: 't'
73: 'e'
74: 'd'
75: ';'
76: 'v'
77: 'a'
78: 'r'
79: 'i'
80: 'a'
81: 'b'
82: 'l'
83: 'e'
84: 's'
85: '['
86: ']'
87: ','
88: 'i'
89: 'n'
90: 't'
91: 'c'
92: 'h'
93: 'a'
94: 'r'
95: 'f'
96: 'l'
97: 'o'
98: 'a'
99: 't'
100: 'f'
101: 'u'
102: 'n'
103: 'c'
104: 't'
105: 'i'
106: 'o'
107: 'n'
108: 'b'
109: 'o'
110: 'd'
111: 'y'
112: 'v'
113: 'o'
114: 'i'
115: 'd'
116: '='
117: 'r'
118: 'e'
119: 't'
120: 'u'
121: 'r'
122: 'n'
123: 'i'
124: 'n'
125: 'p'
126: 'u'
127: 't'
128: 'o'
129: 'u'
130: 't'
131: 'p'
132: 'u'
133: 't'
134: 'i'
135: 'f'
136: 'e'
137: 'l'
138: 's'
139: 'e'
140: 'w'
141: 'h'
142: 'i'
143: 'l'
144: 'e'
145: 'f'
146: 'o'
147: 'r'
148: '+'
149: '-'
150: '*'
151: '/'
152: '&'
153: '&'
154: '|'
155: '|'
156: '!'
157: '='
158: '<'
159: '>'
160: '>'
161: '='
162: '<'
163: '='
164: '='
165: '='
166: '\t'
167: '\n'
168: '\r'
169: ' '
170: 'a'-'z'
171: 'a'-'z'
172: 'A'-'Z'
173: '0'-'9'
174: .
*/
