// Code generated by gocc; DO NOT EDIT.

package lexer

import (
	"io/ioutil"
	"unicode/utf8"

	"github.com/uliseslugo/ilusa_pp/gocc/token"
)

const (
	NoState    = -1
	NumStates  = 155
	NumSymbols = 173
)

type Lexer struct {
	src     []byte
	pos     int
	line    int
	column  int
	Context token.Context
}

func NewLexer(src []byte) *Lexer {
	lexer := &Lexer{
		src:     src,
		pos:     0,
		line:    1,
		column:  1,
		Context: nil,
	}
	return lexer
}

// SourceContext is a simple instance of a token.Context which
// contains the name of the source file.
type SourceContext struct {
	Filepath string
}

func (s *SourceContext) Source() string {
	return s.Filepath
}

func NewLexerFile(fpath string) (*Lexer, error) {
	src, err := ioutil.ReadFile(fpath)
	if err != nil {
		return nil, err
	}
	lexer := NewLexer(src)
	lexer.Context = &SourceContext{Filepath: fpath}
	return lexer, nil
}

func (l *Lexer) Scan() (tok *token.Token) {
	tok = &token.Token{}
	if l.pos >= len(l.src) {
		tok.Type = token.EOF
		tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = l.pos, l.line, l.column
		tok.Pos.Context = l.Context
		return
	}
	start, startLine, startColumn, end := l.pos, l.line, l.column, 0
	tok.Type = token.INVALID
	state, rune1, size := 0, rune(-1), 0
	for state != -1 {
		if l.pos >= len(l.src) {
			rune1 = -1
		} else {
			rune1, size = utf8.DecodeRune(l.src[l.pos:])
			l.pos += size
		}

		nextState := -1
		if rune1 != -1 {
			nextState = TransTab[state](rune1)
		}
		state = nextState

		if state != -1 {

			switch rune1 {
			case '\n':
				l.line++
				l.column = 1
			case '\r':
				l.column = 1
			case '\t':
				l.column += 4
			default:
				l.column++
			}

			switch {
			case ActTab[state].Accept != -1:
				tok.Type = ActTab[state].Accept
				end = l.pos
			case ActTab[state].Ignore != "":
				start, startLine, startColumn = l.pos, l.line, l.column
				state = 0
				if start >= len(l.src) {
					tok.Type = token.EOF
				}

			}
		} else {
			if tok.Type == token.INVALID {
				end = l.pos
			}
		}
	}
	if end > start {
		l.pos = end
		tok.Lit = l.src[start:end]
	} else {
		tok.Lit = []byte{}
	}
	tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = start, startLine, startColumn
	tok.Pos.Context = l.Context

	return
}

func (l *Lexer) Reset() {
	l.pos = 0
}

/*
Lexer symbols:
0: '.'
1: 'e'
2: '+'
3: '-'
4: '"'
5: '"'
6: 'P'
7: 'r'
8: 'o'
9: 'g'
10: 'r'
11: 'a'
12: 'm'
13: ':'
14: 'm'
15: 'a'
16: 'i'
17: 'n'
18: '('
19: ')'
20: '{'
21: '}'
22: 'C'
23: 'l'
24: 'a'
25: 's'
26: 's'
27: 'a'
28: 't'
29: 'r'
30: 'i'
31: 'b'
32: 'u'
33: 't'
34: 'e'
35: 's'
36: 'i'
37: 'n'
38: 'h'
39: 'e'
40: 'r'
41: 'i'
42: 't'
43: 's'
44: 'm'
45: 'e'
46: 't'
47: 'h'
48: 'o'
49: 'd'
50: 's'
51: 'p'
52: 'u'
53: 'b'
54: 'l'
55: 'i'
56: 'c'
57: 'p'
58: 'r'
59: 'i'
60: 'v'
61: 'a'
62: 't'
63: 'e'
64: 'p'
65: 'r'
66: 'o'
67: 't'
68: 'e'
69: 'c'
70: 't'
71: 'e'
72: 'd'
73: ';'
74: 'v'
75: 'a'
76: 'r'
77: 'i'
78: 'a'
79: 'b'
80: 'l'
81: 'e'
82: 's'
83: ','
84: '['
85: ']'
86: 'i'
87: 'n'
88: 't'
89: 'c'
90: 'h'
91: 'a'
92: 'r'
93: 'f'
94: 'l'
95: 'o'
96: 'a'
97: 't'
98: 'f'
99: 'u'
100: 'n'
101: 'c'
102: 't'
103: 'i'
104: 'o'
105: 'n'
106: 'b'
107: 'o'
108: 'd'
109: 'y'
110: 'v'
111: 'o'
112: 'i'
113: 'd'
114: '='
115: 'r'
116: 'e'
117: 't'
118: 'u'
119: 'r'
120: 'n'
121: 'i'
122: 'n'
123: 'p'
124: 'u'
125: 't'
126: 'o'
127: 'u'
128: 't'
129: 'p'
130: 'u'
131: 't'
132: 'i'
133: 'f'
134: 'e'
135: 'l'
136: 's'
137: 'e'
138: 'w'
139: 'h'
140: 'i'
141: 'l'
142: 'e'
143: 'f'
144: 'o'
145: 'r'
146: '+'
147: '-'
148: '*'
149: '/'
150: '&'
151: '&'
152: '|'
153: '|'
154: '!'
155: '='
156: '<'
157: '>'
158: '>'
159: '='
160: '<'
161: '='
162: '='
163: '='
164: '\t'
165: '\n'
166: '\r'
167: ' '
168: 'a'-'z'
169: 'a'-'z'
170: 'A'-'Z'
171: '0'-'9'
172: .
*/
