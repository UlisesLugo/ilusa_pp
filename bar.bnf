/* Lexical part */

id : 'a'-'z' {'a'-'z' | 'A'-'Z' | _digit} ;

cte_char: '\'' . '\'' ;

_digit : '0'-'9' ;

_num : _digit {_digit} ;

cte_i : _num ;

cte_float : _num  '.' _num ['e' ['+' | '-'] _num] ;

cte_string : '"' {.} '"' ;

!whitespace : '\t' | '\n' | '\r' | ' ' ;

/* Syntax part */
<< import (
    "github.com/uliseslugo/ilusa_pp/ast"
    "github.com/uliseslugo/ilusa_pp/types") >>

P : "Program" id ":" P1 P2 P3 B << ast.NewProgram($1,$5,$6) >> ;
P1 : empty | CL ;
P2 : empty | DV << ast.GlobalVarDec($0) >>;
P3 : empty | F ;

B : "main" "(" ")" "{" B1 "}" << $4, nil >>;
B1 : empty | EST B1 << ast.NewStatements($0,$1) >>;

CL : "Class" id ":" INH "{" "atributes" "{" ATR_CL "}" MET_CL "}" << ast.NewClass($1) >>;
INH : empty | "inherits" id ;
MET_CL : empty | "methods" "{" F MET_CL1 "}" ;
MET_CL1 : empty | F MET_CL1 ;
ATR_CL : "public" ":" ATR_SIMP "private" ":" ATR_SIMP "protected" ":" ATR_SIMP ;
ATR_SIMP : TIP_SIMP id DV2 ";" ATR_SIMP1 ;
ATR_SIMP1 : empty | ATR_SIMP ATR_SIMP1 ;

DV : "variables" "{" DV1 "}" << $2, nil >>;
DV1 : empty | DV2 ";" DV1 << ast.NewBlockVariables($0,$2) >> ;
DV2 : TIP_COMP id DV4 | DV6 DV5 << ast.NewTypeVariables($0,$1) >>;
DV3 : "[" cte_i "]" << ast.NewIntConst($1) >> ;
DV4 : empty | "," id DV4 ;
DV5 : empty 
 | "," id DV5<< ast.NewVariable(nil,$1,0,0, $2) >>
 | "," id DV3 DV5<< ast.NewVariable(nil,$1,$2,0, $3) >> 
 | "," id DV3 DV3 DV5<< ast.NewVariable(nil,$1,$2,$3, $4) >> ;
DV6 : TIP_SIMP id << ast.NewVariable($0,$1,0,0, nil) >> 
 |    TIP_SIMP id DV3 << ast.NewVariable($0,$1,$2,0, nil) >> 
 |    TIP_SIMP id DV3 DV3 << ast.NewVariable($0,$1,$2,$3, nil) >> ;

TIP_SIMP : "int" << types.Integer, nil >>
 | "char"  << types.Char, nil >>
 | "float" << types.Float, nil >>;
TIP_COMP : id ;

F : "function" F1 id "(" F2 ")" "{" DV "body" "{" EST B1 "}" "}" F4 << ast.NewFunction($2,$7,$10,$11) >> ;
F1 : TIP_SIMP | "void" ;
F2 : empty | TIP_SIMP id F3 ;
F3 : empty | "," TIP_SIMP id F3 ;
F4 : empty | F ;

EST : AS 
 | DEC
 | ESC << ast.FinishOutput($0) >>
 | LEC << ast.FinishInput($0) >>
 | LLAM 
 | RET
 | REP;

AS : id "=" H_EXP ";" << ast.NewAssignation($0,$2) >>;

LLAM : id "(" LLAM1 ")" ";" << ast.NewFunctionCall($0, $2) >>;
LLAM1 : empty | H_EXP LLAM2 ;
LLAM2 : empty | "," H_EXP LLAM2 ;

RET : "return" "(" H_EXP ")" ";" << ast.Return($2) >>;

LEC : "input" "(" VAR LEC1 ")" ";" << ast.NewInput($2,$3) >>;
LEC1 : empty | "," VAR LEC1 << ast.NewInput($1,$2) >>;

ESC : "output" "(" ESC1 ESC2 ")" ";" << ast.NewOutput($2, $3) >>;
ESC1 : H_EXP | cte_string ;
ESC2 : empty | "," ESC1 ESC2 << ast.NewOutput($1, $2) >> ;

DEC : "if" "(" H_EXP ")" "{" EST B1 "}" DEC1 << ast.NewIf($2,$5,$6,$8) >>;
DEC1 : empty | "else" "{" EST B1 "}" << ast.NewElse($2,$3) >>;

REP : "while" "(" H_EXP REP1 << ast.NewWhile($2,$3) >>
 | "for" "(" AS ";" H_EXP ";" H_EXP REP1 ;
REP1 : ")" "{" EST B1 "}" << ast.LoopStatements($2,$3) >> ;

VAR : id VAR1 VAR1 << ast.GetIdDimConst($0, $1, $2) >>;
VAR1 : empty | "[" H_EXP "]" << $1, nil >>;

H_EXP : S_EXP H_EXP1 << ast.NewExpression($0,$1) >> ;
H_EXP1 : empty | LOG S_EXP << ast.NewOperation($0,$1) >> ;

S_EXP : EXP S_EXP1 << ast.NewExpression($0,$1) >> ;
S_EXP1 : empty | REL EXP << ast.NewOperation($0,$1) >> ;

EXP : TERM EXP1 << ast.NewExpression($0,$1) >> ;
EXP1 : empty 
 | "+" EXP << ast.NewOperation($0,$1) >>
 | "-" EXP << ast.NewOperation($0,$1) >> ;

TERM : FAC TERM1 << ast.NewExpression($0,$1) >>;
TERM1 : empty 
 | "*" TERM << ast.NewOperation($0,$1) >>
 | "/" TERM << ast.NewOperation($0,$1) >> ;

FAC : "(" H_EXP ")" 
 | VAR_CTE
 | "+" VAR_CTE << ast.NewOperation($0,$1) >>
 | "-" VAR_CTE << ast.NewOperation($0,$1) >>;

VAR_CTE : id << ast.NewIdConst($0) >>
 | cte_i << ast.NewIntConst($0) >>
 | cte_float << ast.NewFloatConst($0) >>
 | cte_char << ast.NewCharConst($0) >>;

LOG : "&&" | "||" | "!=" ;
REL : "<" | ">" | ">=" | "<=" | "==" ;
