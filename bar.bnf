/* Lexical part */

id : 'a'-'z' {'a'-'z' | 'A'-'Z' | _digit} ;

_digit : '0'-'9' ;

_num : _digit {_digit} ;

cte_i : _num ;

cte_float : _num  '.' _num ['e' ['+' | '-'] _num] ;

cte_string : '"' {.} '"' ;

!whitespace : '\t' | '\n' | '\r' | ' ' ;

/* Syntax part */
<< import "github.com/uliseslugo/ilusa_pp/ast" >>

P : "Program" id ":" P1 P2 P3 B << ast.NewProgram($1) >> ;
P1 : empty | CL ;
P2 : empty | DV ;
P3 : empty | F ;

B : "main" "(" ")" "{" B1 "}" ;
B1 : empty | EST B1 ;

CL : "Class" id ":" INH "{" "atributes" "{" ATR_CL "}" MET_CL "}" << ast.NewClass($1) >>;
INH : empty | "inherits" id ;
MET_CL : empty | "methods" "{" F MET_CL1 "}" ;
MET_CL1 : empty | F MET_CL1 ;
ATR_CL : "public" ":" ATR_SIMP "private" ":" ATR_SIMP "protected" ":" ATR_SIMP ;
ATR_SIMP : TIP_SIMP id DV2 ";" ATR_SIMP1 ;
ATR_SIMP1 : empty | ATR_SIMP ATR_SIMP1 ;

DV : "variables" "{" DV5 "}" ;
DV1 : TIP_COMP id DV2 << ast.NewVariable($1) >> 
 | TIP_SIMP id DV3 DV3 DV4 << ast.NewVariable($1) >> ;
DV2 : empty | "," id DV2 << ast.NewVariable($1) >> ;
DV3 : empty | "[" cte_i "]" ;
DV4 : empty | "," id DV3 DV3 DV4 << ast.NewVariable($1) >> ;
DV5 : empty | DV1 ";" DV5;

TIP_SIMP : "int" | "char" | "float" ;
TIP_COMP : id ;

F : "function" F1 id "(" F2 ")" "{" DV "body" "{" EST B1 "}" "}" << ast.NewFunction($2) >> ;
F1 : TIP_SIMP | "void" ;
F2 : empty | TIP_SIMP id F3 << ast.NewFunction($1) >>;
F3 : empty | "," TIP_SIMP id F3 << ast.NewFunction($2) >>;

EST : AS | DEC | ESC | LEC | LLAM | RET | REP;

AS : id "=" H_EXP ";" ;

LLAM : id "(" LLAM1 ")" ;
LLAM1 : empty | H_EXP LLAM2 ;
LLAM2 : empty | "," H_EXP LLAM2 ;

RET : "return" "(" H_EXP ")" ;

LEC : "input" "(" VAR LEC1 ")" ;
LEC1 : empty | "," VAR LEC1 ;

ESC : "output" "(" ESC1 ESC2 ")" ";" ;
ESC1 : H_EXP | cte_string ;
ESC2 : empty | "," ESC1 ESC2 ;

DEC : "if" "(" H_EXP ")" "{" EST B1 "}" DEC1 ;
DEC1 : empty | "else" "{" EST B1 "}" ;

REP : "while" "(" H_EXP REP1 | "for" "(" AS ";" H_EXP ";" H_EXP REP1 ;
REP1 : ")" "{" EST B1 "}" ;

VAR : id VAR1 VAR1 ;
VAR1 : empty | "[" H_EXP "]" ;

H_EXP : S_EXP H_EXP1 ;
H_EXP1 : empty | LOG S_EXP ;

S_EXP : EXP S_EXP1 ;
S_EXP1 : empty | REL EXP ;

EXP : TERM EXP1 ;
EXP1 : empty | "+" EXP | "-" EXP ;

TERM : FAC TERM1 ;
TERM1 : empty | "*" TERM | "/" TERM ;

FAC : "(" H_EXP ")" | VAR_CTE | "+" VAR_CTE | "-" VAR_CTE ;

VAR_CTE : id | cte_i | cte_float ;
LOG : "&&" | "||" | "!=" ;
REL : "<" | ">" | ">=" | "<=" | "==" ;
